Front end:
    Login Page
        username
        password
        login button
        bootstrap alert for login failure
        infinite login attempts
        successful login for admins goes to the employee admin page
        successful login for admins goes to the review list page

    User details (user id and role) stored in App Context
    Logout button + username in top right corner

    Employee Admin Page (admin only this is similar to a classic todo app)
        List of employees (each list item is a component)
        pencil icon next to each list item that enables editing the details
        "X" button to delete items

        editable employee detail list item component (admin only)
            a check mark to save the details

        Plus button (admin only) - open a new editable employee detail list item row

        "review" link that expands a Review List component (or "no reviews")
            below the current employee and above the next employee. Click up arrow,
            or click the "review" link on another employee to re-hide

        "no reviews" component - "This employee has no reviews
                                   click _here_ to start one!" -> Employee Performance Review Page

    Review List Component
        list of employee reviews
        pending reviews filtered by currently logged in employee's user id

        - <component>: Simple clickable list of employee full names, ie:
        - <component>: review list item 
            ("You have incomplete performance reviews for the following: <- this text is for non-admins only
                John Smith
                Mary Sue
                ")

            clicking this component takes you to the Employee Performance Review page

    Review List Page for non-admins
        Review List Component is embedded in this page
        Non-admins, so they can only see reviews they have been assigned to work on

    Employee Performance Review Page
        Simple form with basic questions:
            - alerts about incoming changes with the option to "update"

            - <component>: "On a Scale of 1-5 (1 being extremely poor and 5 being extremely excellent),
                How well does John Smith:
                    <component, repeated> Demonstrate consistent, reliable attendance
                    <same component, repeated> Collaborate / function as a team player
                    ~ Work Efficiency
                    ~ Exhibit Performance that Aligns With the Corporate Vision

            - In your own words, discuss areas where John Smith is DOING WELL? <- this is the same component  <- this is a component
                <textarea>
            - In your own words, discuss any areas where you think John Smith NEEDS IMPROVEMENT?

            Everyone has a save button with displays a warning when overriding newer changes

            Admins have a "close" button to close the review
            Non-admins have a "complete" button to remove the review from their list of assigned reviews

            Admins can add a checkmark next to the usernames of employees to assign as reviewers

            stretch goal: a text box that admins can use to search for employees by full name, which adds the employees' name to a list inside
            the text box, similar to Microsoft Outlook's "To:" field for outgoing emails.

        Login component using Meteor's accounts-password plugin

        Stretch goal: REST controller that serves a list of reviews, optionally filtered by employee
        Stretch goal: REST controller that serves details about a given employee, including his current performance review

Backend:
    request handler ("Meteor method") for creating employees and/or updating their details (requires admin role)
    request handler ("Meteor method") for retrieving employee details (requires admin role)
    ~ deleting an employee (and their associated records from all three collections)
    ~ creating (admin only) and updating (admin & employee) a review for an employee
    ~ retrieving a review about an employee
    ~ retrieving a list of reviews about an employee
    ~ associating a review with an employer who will review it (admin only)
    ~ removing an association between a review and the assigned reviewer
        (when they click "submit" or the employee is deleted)

    database connection string from environment variable; defaults to "localhost"

    Error handling:
        Human-readable error messages will propagate up to a Bootstrap alert

    Request handler pattern:
        (request, response) => {
            // authenticate request - could/should be middleware but we only have 3 endpoints and very little time
            // validate request body if updating or inserting
            // call data model functions to perform CRUD & return the results with attendant status codes
        }

    Data layer ("helper") pattern:
        (incoming model - OR - ID's to search by) => {
            // validate incoming associations (see "Mongo collections" below)

            // perform upsert or delete

            // except in the DELETE case, always return the results of a search;
            //      even create and update will return the resulting data
        }

    Mongo collections:
        employee (named because Meteor has it's own "user" collection):
            { username, 
                user_id,                          // uuid, from meteor's user collection
                fullName,                          // string
                }

        performanceReview: { _id,
                            reviewee,      // uuid, = employee.user_id
                            attendance,     // number, 1-5
                            collaboration,  // number, 1-5
                            efficiency,     // number, 1-5
                            vision,         // number 1-5
                            needsImprovement,        // string
                            isDoingWell,              // string
                            isReviewClosed,         // boolean
                            startDate       // number, UTC epoch time
                            }

        THE NEXT TABLE ESTABLISHES A ONE-TO-MANY RELATIONSHIP BETWEEN EMPLOYEES,
        THE REVIEWS THEY ARE PARTICIPATING IN, AND REVIEWS THAT ARE ABOUT THEM:

        reviewAssignment: { reviewer,           // uuid, = employee.user_id
                            review_id,          // uuid, = performanceReview._id

    Tech stack / assumptions
        Meteor.JS (provides a full build system using webpack with support for ESNext,
            socket-based client/server communication with live streaming data,
            MongoDB support, and
            hybrid mobile development using apache cordova out of the box --
            with first-class plugins for React, server-side rendering, OAuth2-based security
            )

        Assumptions:
            Each employee only has one performance review that is about them
                stretch goal: support multiple reviews about the same employee

            nothing needs to be saved or cached on the client side (eg using local storage)
            The generic performance review questions listed above are sufficient
            Do not need Redux or RxJS since this is such a simple application
            Admins do not need/want to make up their own questions
            Changes made by any reviewer affect the state of the review for everyone
            this application is internal to the company, so server-side rendering is not necessary
            Twitter bootstrap (specifically React Bootstrap)
            Responsive, mobile-first design
            Server load will be miniscule, so no need to use PM2, nGinx, or Docker
                 - although docker would be nice for continuous integration purposes, so let's make it a stretch goal

        Tech stack:
            Instead of Redux Actions, will use Context and borrow concept of injectable services from Angular for REST calls
                (see ?.js for an example)
            React router
            MongoDB (data model is extraordinarily simple so a normalized solution is unnecessary)
            @hapi/Joi for model validation
            Using meteor connect handlers for express-like endpoints (https://docs.meteor.com/packages/webapp.html)
            Jest integration tests for connected components, no tests for "dumb" components
            End-to-end tests (for REST services, time permitting) written in Jest using Isomorphic Fetch

Proceed as follows:

1) identify tests (these may change as i learn more during development) X
2) scaffolding (meteor, react, react router, react-bootstrap, jest, @hapi/joi, moment, lodash, styled-jsx, history, react-dom)
    remove insecure, autopublish Meteor packages, add accounts-password & accounts-ui
    initial route & landing page                                        X
3) MVP (Employee List)                                                  X
4) Login page                                                           X
4) Create review pane & wire it up to the employee admin view
5) Review list (admin view which allows creation of new reviews and edit existing + accompanying API calls & handlers)
6) support for multiple users (password protected) & assignment of reviews to non-admins by admins
7) Create deployable & get connection string from env.
8) "complete"/"close" functionality
9) stretch goal: REST endpoints (with tests to demonstrate mastery of isomorphic fetch)
10) stretch goal: multiple reviews about each employee
11) stretch goal: outlook-like search box
12) stretch goal: Docker file
